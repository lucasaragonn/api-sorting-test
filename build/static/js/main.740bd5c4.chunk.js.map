{"version":3,"sources":["components/Planets/index.tsx","components/hooks/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Planets/index.module.scss"],"names":["Planets","items","React","useState","sortConfig","setSortConfig","useMemo","sortableItems","options","numeric","sensitivity","sort","a","b","direction","key","localeCompare","undefined","useSortPlanets","data","className","styles","planetsContainer","onClick","map","planet","index","name","climate","terrain","population","App","url","ref","setData","error","setError","loading","setLoading","useEffect","current","fetch","res","json","resJson","fetchData","useFetch","useRef","results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mNAuCeA,EA9BC,SAAC,GAA2B,IAAD,EC2Bb,SAACC,GAAsB,IAAD,EAEdC,IAAMC,SAAkB,MAFV,mBAE3CC,EAF2C,KAE/BC,EAF+B,KA+BlD,MAAO,CAAEJ,MA3BWC,IAAMI,SAAQ,WAChC,IAAIC,EAAa,YAAON,GAExB,GAAmB,OAAfG,EAAqB,CACvB,IAAMI,EAAU,CAAEC,SAAS,EAAMC,YAAa,QAC9CH,EAAcI,MAAK,SAACC,EAAGC,GACrB,MAAgC,cAAzBT,EAAWU,UAChBF,EAAER,EAAWW,KAAKC,cAAcH,EAAET,EAAWW,UAAME,EAAWT,GAC9DK,EAAET,EAAWW,KAAKC,cAAcJ,EAAER,EAAWW,UAAME,EAAWT,MAIpE,OAAOD,IAEN,CAACN,EAAOG,IAakBO,KAXhB,SAACI,GACZ,IAAID,EAAY,YAEZV,GAAcA,EAAWW,MAAQA,GAAgC,cAAzBX,EAAWU,YACrDA,EAAY,cAGdT,EAAc,CAAEU,MAAKD,gBDrDCI,CADiB,EAAxBC,MACTlB,EADiC,EACjCA,MAAOU,EAD0B,EAC1BA,KAEf,OACE,qBAAKS,UAAWC,IAAOC,iBAAvB,SACE,kCACE,gCACE,+BACE,oBAAIC,QAAS,kBAAMZ,EAAK,SAAxB,kBACA,oBAAIY,QAAS,kBAAMZ,EAAK,YAAxB,qBACA,oBAAIY,QAAS,kBAAMZ,EAAK,YAAxB,sBACA,oBAAIY,QAAS,kBAAMZ,EAAK,eAAxB,6BAGJ,gCACGV,EAAMuB,KAAI,SAACC,EAAiBC,GAAlB,OACT,+BACE,6BAAKD,EAAOE,OACZ,6BAAKF,EAAOG,UACZ,6BAAKH,EAAOI,UACZ,6BAAKJ,EAAOK,eAJLJ,cEFNK,EAnBH,WACV,IADgB,EDDM,SAACC,EAAaC,GAA0C,IAAD,EACrD9B,mBAAS,MAD4C,mBACtEgB,EADsE,KAChEe,EADgE,OAEnD/B,mBAAS,MAF0C,mBAEtEgC,EAFsE,KAE/DC,EAF+D,OAG/CjC,oBAAS,GAHsC,mBAGtEkC,EAHsE,KAG7DC,EAH6D,KA6B7E,OAxBAC,qBAAU,WAkBR,OAhBIN,EAAIO,SACS,uCAAG,8BAAA5B,EAAA,+EAEI6B,MAAMT,GAFV,cAERU,EAFQ,gBAGQA,EAAIC,OAHZ,OAGRC,EAHQ,OAIdV,EAAQU,GACRN,GAAW,GALG,kDAOdF,EAAS,EAAD,IAPM,0DAAH,oDAYfS,GAGK,WACLZ,EAAIO,SAAU,KAGf,CAACR,EAAKC,IAEF,CAAEI,UAASlB,OAAMgB,SCzBSW,CAC/B,iCAHyBC,kBAAO,IAE1B5B,EAHQ,EAGRA,KAAMkB,EAHE,EAGFA,QAASF,EAHP,EAGOA,MAKvB,OACE,mCACGE,EACC,8CAEAF,EAAS,mDAAgC,cAAC,EAAD,CAAShB,KAAMA,EAAK6B,aCHtDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCdAc,EAAOC,QAAU,CAAC,iBAAmB,qC","file":"static/js/main.740bd5c4.chunk.js","sourcesContent":["import React from 'react';\nimport { useSortPlanets } from '../hooks';\nimport { IPlanet } from '../interfaces';\nimport styles from './index.module.scss';\n\ninterface PlanetProps {\n  data: IPlanet[];\n}\n\nconst Planets = ({ data }: PlanetProps) => {\n  const { items, sort } = useSortPlanets(data);\n\n  return (\n    <div className={styles.planetsContainer}>\n      <table>\n        <thead>\n          <tr>\n            <th onClick={() => sort('name')}>Name</th>\n            <th onClick={() => sort('climate')}>Climate</th>\n            <th onClick={() => sort('terrain')}> Terrain</th>\n            <th onClick={() => sort('population')}>Population</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((planet: IPlanet, index: number)=> (\n            <tr key={index}>\n              <td>{planet.name}</td>\n              <td>{planet.climate}</td>\n              <td>{planet.terrain}</td>\n              <td>{planet.population}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n\n  );\n}\n\nexport default Planets;","import React, { useState, useEffect } from 'react';\nimport { IPlanet, IConfig } from '../interfaces';\n\nexport const useFetch = (url: string, ref: React.MutableRefObject<boolean>) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n\n    if (ref.current) {\n      const fetchData = async () => {\n        try {\n          const res = await fetch(url);\n          const resJson = await res.json();\n          setData(resJson);\n          setLoading(false);\n        } catch (err) {\n          setError(err);\n        } \n\n      };\n\n      fetchData();\n    }\n    \n    return () => {\n      ref.current = false;\n    };\n\n  }, [url, ref]);\n\n  return { loading, data, error };\n\n};\n\nexport const useSortPlanets = (items: IPlanet[]) => {\n\n  const [sortConfig, setSortConfig] = React.useState<IConfig>(null);\n  \n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n\n    if (sortConfig !== null) {\n      const options = { numeric: true, sensitivity: 'base' };\n      sortableItems.sort((a, b) => {\n        return sortConfig.direction === 'ascending' ? \n          a[sortConfig.key].localeCompare(b[sortConfig.key], undefined, options): \n          b[sortConfig.key].localeCompare(a[sortConfig.key], undefined, options);\n      });\n    }\n\n    return sortableItems;\n\n  }, [items, sortConfig]);\n\n  const sort = (key: string) => {\n    let direction = 'ascending';\n\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n\n    setSortConfig({ key, direction });\n\n  }\n\n  return { items: sortedItems, sort };\n}","import React, { useRef } from 'react';\nimport { useFetch } from './components/hooks';\nimport Planets from './components/Planets';\n\nconst App = () => {\n  const isComponentMounted = useRef(true);\n\n  const { data, loading, error } = useFetch(\n    'https://swapi.dev/api/planets/',\n    isComponentMounted,\n  );\n\n  return (\n    <>\n      {loading ? (\n        <div>Loading ...</div>\n      ) : (\n        error ? (<div>error, try again</div>) : (<Planets data={data.results} />)\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"planetsContainer\":\"Planets_planetsContainer__iqenZ\"};"],"sourceRoot":""}